name: CI/CD - Node.js Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # ========== ETAPA 1: BUILD ==========
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Instalar dependencias (BUILD)
      run: npm ci
      env:
        CI: true
    
    # ========== ETAPA 2: TEST ==========
    - name: Ejecutar Linter (An√°lisis de c√≥digo)
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "‚úì No hay script lint, se omite."
        fi
    
    - name: Ejecutar pruebas autom√°ticas (TEST)
      run: |
        TEST_SCRIPT=$(node -p "require('./package.json').scripts.test || ' '")
        if [ -n "$TEST_SCRIPT" ] && ! echo "$TEST_SCRIPT" | grep -qi "no test specified"; then
          echo " Ejecutando pruebas..."
          npm test
        else
          echo "‚úì No hay pruebas definidas, se omite."
        fi
    
    - name: Auditor√≠a de seguridad
      continue-on-error: true
      run: |
        echo " Ejecutando auditor√≠a de seguridad..."
        npm audit --audit-level=high
    
       # ========== ETAPA 3: DEPLOY CON DOCKER ==========
    - name: Construir imagen Docker de producci√≥n
      run: |
        echo "üê≥ Construyendo imagen Docker..."
        docker build -t mi-app-produccion:latest .
        echo "‚úÖ Imagen Docker construida"
        docker images mi-app-produccion

    - name: Probar contenedor en entorno simulado
      run: |
        echo "üöÄ Iniciando contenedor..."
        docker run -d --name app-test -p 3000:3000 mi-app-produccion:latest
        sleep 5
        echo "üîç Health check..."
        curl -f http://localhost:3000/health && echo "‚úÖ App funciona en Docker"
        docker stop app-test
        docker rm app-test

    - name: Simular despliegue en producci√≥n
      run: |
        echo "üéâ ¬°DESPLIEGUE EN DOCKER EXITOSO!"
        echo "‚úÖ Contenedor construido y probado"
        echo "üöÄ Listo para producci√≥n"